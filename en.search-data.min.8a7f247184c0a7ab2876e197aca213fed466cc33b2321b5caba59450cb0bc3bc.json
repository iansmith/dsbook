[{"id":0,"href":"/dsbook/docs/thesetup/","title":"(00) The Setup","section":"Docs","content":" Lesson 0: The Set-Up # The name of this lesson is taken from the beginning of the movie The Sting with Paul Newman and Robert Redford.\nLesson summary # At the end of this lesson you should be able to:\nRun all the necessary tools for building and running a real datastar project. Run your enable script to set up your environment and tooling. You should also know:\nThe basic purpose of the tools that we are going to be using to build this application, even if you don\u0026rsquo;t know them in detail. The purpose and theory of the enable script and, if you are an advanced user, why you don\u0026rsquo;t want to use it. Whether or not you should be reading this book\u0026ndash;we hope you will be! How to understand the formatting convention that we use in this book, \u0026ldquo;is that a file showing a shell script or a shell script that I should enter?\u0026rdquo; What resources you can consult if your project (or our documentation!) gets seriously hosed. "},{"id":1,"href":"/dsbook/docs/thesetup/preface/","title":"Preface","section":"(00) The Setup","content":" Preface # In The Beginning # In the beginning there was nothing, not even time. No planets, no stars, no hip-hop, no rhyme. But there was a bang like the sound of my gat, The universe began and the sh\u0026ndash; was phat. \u0026mdash;MC Hawking\nM.C. Hawking\nA Brief History of Rhyme: MC Hawking\u0026rsquo;s Greatest Hits\nThe title of this book is Simplicity Is A Virtue and not only is this claim correct, but we will be emphasizing it a great deal in future chapters. Many books, and countless Ph.D. theses, have been written about complexity being the bane of software development. The positions taken and remedies suggested by these many authors are all-over-the-map, but it is safe to say that nobody is in favor of adding complexty.\nSnark:What did Robespierre do related to virtue in the early 1790s? Well, he invented an entirely new religion based on the god of virtue and planned to impose it on all of France. With himself as the high priest, of course. Robespierre == DHH?\nAfter two attempts I\u0026rsquo;m going to put off this page. # Not sure what example to use here to illustrate the complexity and diffilut interactions between tools/frameworks \u0026ndash; the tailwind build procdure? Single out js frameworks?\n[discuss the issue of starter or template projects versus \"day 2\" things] The Javascript Framework Du Jour # Although many are familiar with this problem, it bears repeating: Software never shrinks it only expands. You might notice this because you install some javascript tool and you end up installing 147 packages in your `node_modules`. The Javascript community, especially those that work on the browser part of applications seem to be in a perverse re-run of Groundhog day.\nYay, we\u0026rsquo;ve released the first preview release of new tool \u0026lt;whatevs\u0026gt;! This is a moneumental day because you no longer are going to be forced to use the old framework \u0026lt;blah\u0026gt; anymore because whatevs is smaller, faster, better, easier to use, and can make a mango milkshake. Don\u0026rsquo;t succumb to the bloatware of blah! It\u0026rsquo;s simply too big and complex to get anything serious done with! Whatevs is the smaller, simpler future!\nNumerous people begin trolling and pointing out all the features of the many previous blahs that are done badly or totally missing in whatevs. The developers of whatevs dutifully begin adding in bad copies of the requested features. Whatevs begins increasing in size\u0026hellip;\nToday is a momemntous day in front end developmen with the release of \u0026lt;fleazil\u0026gt;. Don\u0026rsquo;t succumb to working with the bloated and complex whatevs framework! The time is now to switch to \u0026lt;fleazil\u0026gt; because \u0026hellip;\nLather. Rinse. Repeat.\nThe title of this collection of babel and drivel is \"Simplicity Is A Virtue\" with a longer subtitle. This choice is not an accident, even if we sometimes wander far afield from _our lane_. One reason that this is a fine title for a work such as this is, well, it's true. There are, in fact, others. We also consider \u0026ldquo;The backend developers are coming for your jobs! Flee in terror!\u0026rdquo; But that seemed a bit too long.\nSometimes in this book you will see sidebars that explain the _why_ of tools that we use and use in this book, especially datastar. We've not chosen these tools because they the embodiment of simplicity (although some are). We've chosen them because the _idea_ that needs to be communicate with someone else for them to understand what the tool does is small, clear, and doesn't need a thick book and a lawyer to get the hang of it. We also consider \u0026ldquo;The backend developers are coming for your jobs! Flee in terror!\u0026rdquo; Oh, dear.\n"},{"id":2,"href":"/dsbook/docs/thesetup/who-should-be-reading-this-book/","title":"Who Should Be Reading This Book","section":"(00) The Setup","content":" Who Should Be Reading This Book # Our target # When started, this effort had the vague and ill-formed idea that you, our reader, would be somebody who understands how the web works and knows how to program in go. If that sounds like you, you can go to the fridge and get a snack.\nBring us a cold beer, if you got one to spare.\nIf you would like a bit more specificity related to the web, we assume you understand what html and css are and what their respective purposes are. Further, we assume you know at least the basics of go (aka golang) programming. If you have experience in C or python you\u0026rsquo;ll find golang quite familiar and you can probably scrape by.\nThere really is no particular reason that golang is required to build programs using datastar. The datastar library on the browser side is implemented as a small amount of javascript (about 15Kb) and the library neither knows nor cares how the back-end is implemented. In fact, demonstrations have been done with node and haskell on the back end\u0026ndash;but they are not supported to the degree that golang is. The datastar machinery would work acceptably with any back-end programming language for which there were helper functions, but the authors think that golang is particularly well suited for datastar.\nHey, no snarky comments suggesting the purpose of html and css is to torment web developers. We get to do the snarky comments around here.\nWe\u0026rsquo;d be happy to have a conversation with somebody who wants to create a parallel set python helpers for datastar akin the existing ones for golang. That would be truly righteous.\nContinuing our potentially wrong assumptions, we assume you are familiar how to use command line tools in a unix-ish environment. For example, we have no plan to explain what PATH or how it works. So, if that\u0026rsquo;s a mystery too you, you probably want to read another book first and then come back to us. We developed this content primarily on macOS and linux laptops, so things are the best tested there.\nFinally, we assume that you are familiar with at least one templating language or templating tool. There are dozens of these types of tools available in the open-source community and, ultimately, they all do the same thing. Although you may not be familiar with the one we are using in these lessons, it is not that different from whatever you have seen before.\nWe have no idea about how to do this type of thing in windows with powershell or the windows linux emulation. If you do know about things of that nature, we\u0026rsquo;d love to get a pull request from you!\nThe most problematic assumption we have made about our readers that you don\u0026rsquo;t have much experience with Javascript\u0026mdash;perhaps none. This is a difficult assumption for two reasons:\nPeople who are interested in \u0026ldquo;front end\u0026rdquo; or \u0026ldquo;ui\u0026rdquo; development today often have a lot of experience with Javascript; many even write Javascript for a living. These folks with such experience could certainly be interested in how the datastar layer works inside the browser or various things you can do to integrate datastar on the backend with javascript on the front-end.\nReaders with little or no javascript experience may find the (ahem) idiosyncratic issues with javascript in a browser more confusing than edifying. We can\u0026rsquo;t and won\u0026rsquo;t fit yet another book about Javascript inside this one.\nSnark: Readers who have no experience with Javascript can consider themselves fortunate.\nSnark: People who have years of JS experience today can think of that experience as better labelled \u0026ldquo;pre-Datastar\u0026rdquo;.\nSo, the compromise we have reached is to do little, but not no, discussion of Javascript-related issues in Datastar and to pursue them only as they become needed.\nHowever, these will be done with the little \u0026ldquo;details\u0026rdquo; box and readers that are unfamiliar with Javascript can just leave the little arrow turned to the side and be on their merry way.\nStephen Weinberg, the Nobel-prize winning physicist, wrote the excellent, thin volume, The First Three Minutes. He said in his introduction that he hoped that he had written a book that any reasonably intelligent individual could read and understand without a physics or mathematics background. He said the book didn\u0026rsquo;t require more mathematics than multiplication. He may have achieved this, but we have no such lofty ambitions. We\u0026rsquo;re in it for the memes.\n"},{"id":3,"href":"/dsbook/docs/thesetup/enable-script/","title":"The Enable Script","section":"(00) The Setup","content":" The Enable Script # An enable script is a quite a specific shell script. It\u0026rsquo;s purpose is to be put into your current shell\u0026rsquo;s environment with source and have that shell be \u0026ldquo;ready\u0026rdquo; for development work. If you are not familiar with building shell scripts (or simply despise them for all the obvious reasons), this script is going to be so simple that it can easily be your first.\nOne of the authors (iansmith) learned this technique in 1991 and it was noted at that time by his colleagues that this technique was \u0026ldquo;old\u0026rdquo; then.\nWe are guessing that many readers are thinking, \u0026ldquo;I know how to use the shell, I don\u0026rsquo;t need this.\u0026rdquo; This technique rewards study. Be sure you understand the idea and the practice of the enable script before you decide to skip this bit. We are going to use it throughout this book. There are number of both common and unusual problems that the enable script technique avoids.\nMany of these problems seem to occur the night before a big demo. At such times you\u0026rsquo;re under pressure and not as careful as you might otherwise be.\nYour DSBOOK dir # In this book, we will assume you have created a directory that we will refer to as your DSBOOK directory. A good choice for this is ~/dsbook but you can choose what you like. We\u0026rsquo;ll use a code block like the one below to indicate one or more commands you should run from the command line.\nGo ahead and create the DSBOOK directory with:\n$ mkdir ~/dsbook The \u0026ldquo;copy code\u0026rdquo; button on this website will copy all the text in that one line command above including the dollar sign. This is unfortunate, but it is customary to use the \u0026lsquo;$\u0026rsquo; to indicate a shell prompt; you do not want to copy and then paste the text of a command like that with the dollar sign included.\nNot-very-pro-tip: In whatever shell you are going to be pasting into, type \u0026ldquo;echo \u0026quot; (with the space) first then paste and hit return. That just harmlessly copies the text to the screen and then you are free to copy again or edit however you want.\nGo into the newly created directory (which, in this book, means cd ~/dsbook) and create the first version of your enable script. It is recommend you use the convention of making the enable script for a project foo be enable-foo. In this case you should open your editor on ~/dsbook/enable-dsbook and enter this content:\nMacOS ## an enable script export DSBOOK=~/dsbook # or whatever directory you chose export PATH=$DSBOOK/bin:\\ /usr/bin:\\ /bin:\\ /usr/sbin:\\ /sbin ## Specify any aliases you need ## You may need to use aliases for things in /usr/local/bin if ## they are *NOT* project specific! alias code=/usr/local/bin/code ## Don\u0026#39;t be afraid to delete aliases or unset environment vars ## that you are sure other projects you work on ... this script ## is for just dsbook. ## Secrets ## Notes Linux Linux content goes here # Windows Windows content goes here # Please! Gentlemen! You cannot fight here! This is the war room! \u0026ndash; from Dr. Strangelove.\nWe are perfectly cool with it though, if you want to throw shade at other people\u0026rsquo;s editors. We like that.\nWe are quite sure that some readers are fuming about the PATH variable in this script and how minimal it is. This is by design and is set to this \u0026ldquo;tiny\u0026rdquo; value in an effort to make sure that anything that ends up in your PATH is done consciously. If you \u0026ldquo;get lucky\u0026rdquo; that you find some tool in your PATH via /usr/local/bin or similar, you are likely to get \u0026ldquo;unlucky\u0026rdquo; at some point later when some future version of you deletes the tool or upgrades the tool to a no-longer-compatible version.\n\u0026ldquo;How can I possibly be expected to do anything even minimally useful with a PATH like that?!?\u0026rdquo;\nIdempotency # Your enable script should be idempotent so you can run whenver you want. If you have any shell and you cd into a project dir like foo then the script enable-foo should be there and you can use source enable-foo to get that shell prepared for work on foo.\nBefore you ask and embarass yourself: Idempotency is the property of an operation that can be applied multiple times without changing the result beyond the initial execution. You can safely run an \u0026ldquo;idempotent operation\u0026rdquo; multiple times without side effects, such as duplicates or inconsistency of data.\nAbout The Future # At various upcoming points in the book we\u0026rsquo;re going to suggest that you add things to your enable script. Some examples of things that we\u0026rsquo;ll be adding are:\nExplicit versioning of dependencies for command line programs Secrets. The DSBOOK directory is the parent of what is going to be source code directory and that directory will have an associated git repository. So, you can safely put secret things, like API keys or encryption keys, in the enable script because it won\u0026rsquo;t be checked in. Notes. A common use of the enable-script, since it is personal to the owner unlike thinngs in a repository, is to put comments in the enable script to keep track of long, complex, or infrequently used commands. An example note:\n# to run the database consistency check use this (for today -\u0026gt; yesterday) # you can use dates if you want to but they have to prefixed by -- and # in the format YYYY-MM-DD. # ENV=PROD db-check consistency-external --today --yesterday # ENV=PROD db-check consistency-external --today --2024-10-01 Using environment variables instead of other means of parameter passing is 12 factorish.\n"},{"id":4,"href":"/dsbook/docs/thesetup/tooling/","title":"Tooling","section":"(00) The Setup","content":" A brief explanation of our tooling # Short descriptions of the function of the tools not about the details of the commands, input, etc. golang # templ # Again, focus on the simplicity, particularly of mixing in go code. ** Maybe concede that sending server values to the javascript side is awkward nats event bus # I got the embedded version of this worikng. Sweet. tailwind? # I was planning to some minimal styling of the app using tailwind Part of this was so we can solicit PRs from the community and maybe somebody will do some nice design for us. git? # Is this like duh?\njson? # Is this like duh?\nhttp # Is this like duh?\nngrok # In a later lesson we\u0026rsquo;ll add some multi-user stuff and this seems like the easiest way that we can control/explain. DNS seems way more complex.\nnpm/npx/node # seems at least somewhat required if you use tailwind it brings up some questions that we probably want to ignore about how to h andle node_modules task # We should supply a Taskfile that is tailored for each lesson. Over the course of a book it would give them several different examples. Adding the tools to your enable script. # Explain the bin directory business with $DSBOOK/bin/foo-\u0026gt;$DSBOOK/bin/foo1.2.3-\u0026gt;actual binary "},{"id":5,"href":"/dsbook/docs/theclock/","title":"(01) The Clock","section":"Docs","content":" Lesson 1: The Clock # No, not like coldplay.\nAlthough it is a very small feature of mirabeau, we are going to walk you through how the timer works. We are going to cover this lesson\u0026rsquo;s code in every detail since it is likely the first source code of a datastar program you have seen.\nEventually this display will be in a corner of the mirabeau UI but for this lesson we\u0026rsquo;ve made it big and central. That makes things easier to see, especially using the web debugger in the browser.\n#####: Aside: I don\u0026rsquo;t really want to get into RAF here, because it just complicates the story.\nLesson summary # At the end of this lesson you should be able to:\nUse the provided Taskfile to build and deploy the mirabeau program\nBe able to make changes to the provided lesson files to change the html used by the application\nBe able to change some browser interactions with application:\nChange the data that is stored in the store to prove you understand about manipulating the store. We are going to just brute force store updates with a string and PatchStoreRaw(). Similarly, the store values on input will be brute forced through the normal go json machinery. No separate type to allow the json decode, just map[string]any. We need to flagellate the reader with the importance and reason that one should not try to keep a lot of state on the client. This will be the natural thing to do (for some of us, ahem).\nAt the end of this lesson should also know enough to:\nExplain to others what these mechanisms in datastar are for:\nGenerating html content (for the moment using just strings) Manipulating the store (again, just strings with sprintf or similar) Responding to user input (at least the case of a mouse click) Explain to others the basics of the SSE mechanism\nExplain where, why and what is the long-lived http GET request in this lesson. Explain why DS doesn\u0026rsquo;t use websockets Bonus Points: Explain how the Taskfile works.\nYou may not understand all the details of these mechanisms yet, but this is it \u0026hellip; there really are no more to learn!\nWhat\u0026rsquo;s the comparison to react? # Do we know a React (or whatever) expert who understands DS enough to explain to us what the analogies are for React? I think it\u0026rsquo;s a good point to take a shot at the whole redux craziness in comparison to just using some strings of javascript. Exercises # Instrument the code to see how many frames per second your timer is able to perform. For the truly gung-ho (advanced exercises; we don\u0026rsquo;t provide the answers) # Change your store to use a strinng for the current time and drive the string from the server with PatchStore. Once you do this, change the string to display to be binary, hex, or octal, which ever one you like the most. Linux: Use the /proc/loadaverage interface to estimate what the maximum number of clients your local machine could support at its current framework. Interpreting the information you get /proc/loadaverage can be tricky\u0026hellip; watch out for multiple CPUs! _ Aside: I want to start cutting off performance questions as soon as possible._ # "},{"id":6,"href":"/dsbook/docs/thecountdown/","title":"(02) The Countdown","section":"Docs","content":" Lesson 2: The Countdown # When you are giving a presentation you probably want to how much time you have left for speaking!\nWe are going to add a countdown timer to the clock we built in the last lesson. Again, this will be much smaller in the final UI but we\u0026rsquo;re going to leave it big for one last lesson.\nWe are going to:\nAdd a countdown timer to the display, that when engaged can start a countdown of 30 mins. Take in/send out the store values using a type PatchStore. Exercises # Adapt the countdown timer so that can be initialized to 60, 45, 30, 20 or 5 mins. Click on the countdown timer to set it for 40 mins, the next click is 30, etc. After you do a click, the timer begins immediately counting down. So, the click is both a way to change the amount of time and a reset. For the truly gung-ho (advanced exercises; we don\u0026rsquo;t provide the answers) # * Take the existing timer code and use it to create the digital equivalent of a flyback stopwatch. * A click causes the countdown timer to stop but the time keeps advancing normally. A second click causes the countdown timer to \u0026quot;flyback\u0026quot; to \u0026quot;now\u0026quot; and update accordingly. * Cause a \u0026quot;screen-wide\u0026quot; warning to flash when the countdown time reaches 5 min and 1min. * At zero mins remaining the timer and clock should both disappear. * [Hard] Change the display to the show the time as if on an analog clock. This requires either some skill with graphics or trigonemetry/matrices or both. "},{"id":7,"href":"/dsbook/docs/thetemple/","title":"(03) The Temple Of Templ","section":"Docs","content":" Lesson 3: The Temple Of Templ # In this lesson you are going to learn about templ. The good news for you, dear reader, is that templ has excellent documentation and support for a templ template highlight in editors like vscode, vim, etc. Since the documentation is quite good, we\u0026rsquo;re not to spend a lot of time on the particulars of a particular feature of templ, we\u0026rsquo;ll just link their docs.\nYou\u0026rsquo;ll notice in the files for this lesson we have moved the timer to the top right corner of the UI, that\u0026rsquo;s where it will be in the final ui.\nThis lesson should supply them with the templ templates for just the clock part and the primary exercise should be adapting the countdown bit to use templ.\n"},{"id":8,"href":"/dsbook/docs/markdown/","title":"(04) Markdown","section":"Docs","content":" Lesson 4: Markdown Display # In this lesson you are going to take a slight detour in markdown.\nHow to create an internal api that hides an implementation, in this case the API will have the ability to take blobs of text and interpret them as Markdown and display them on screen. Use goldmark to do the processing and then use the long lived connection to display the resulting HTML. Use a golang chan for communicating to the long lived conn so it can block on select. Lesson summary # At the end of this lesson you should be able to explain:\nHow the long lived connection can be used by any goroutine to communicate with the currently connected client. For the truly gung-ho (advanced exercises; we don\u0026rsquo;t provide the answers) # Answer the quetion of what would happen if you run two browsers that are connected to our example mirabeau server? "},{"id":9,"href":"/dsbook/docs/nats/","title":"(05) NATS Receiving","section":"Docs","content":" Nats Receiving # This lesson is to to explain the concepts of nats and build a program that can handle being \u0026ldquo;sent\u0026rdquo; markdown content from the nats CLI. We will probably want to do a simple example or two with markdown actually quoted and sent directly from the command line.\nThe implementation should just run goldmark (via the previous lesson\u0026rsquo;s API) and then send the resulting HTML to the display.\nWe have to explain enough of the CLI to show how you can have multiple listeners, one in the server showing data on the browser, and another that just displays the result via the NATS CLI.\nI have a couple of type-safe wrappers that work on top of NATS and use generics to insure the type-safety. E.g. You cannot \u0026ldquo;subscribe\u0026rdquo; to a subject for which you don\u0026rsquo;t have the correct type declared on your \u0026ldquo;Receive\u0026rdquo; method.\n"},{"id":10,"href":"/dsbook/docs/slides/","title":"(06) NATS Sending... And Slides!","section":"Docs","content":" Displaying Slides # This version will show the golang api to sending on a subject. Naturally, I plan to use my type-safe versions to make this easier.\nThis version will read in all the slides (markdown files) in advance at startup. These slides will then be something that you can move through with the arrow keys. It just blasts the data into the subject and assumes the other end will display it.\nThis is something that you might actually call a prezo tool, but there is much more to do.\n"},{"id":11,"href":"/dsbook/docs/microlith/","title":"(07) The Microlith Architecture","section":"Docs","content":" The Microlith Architecture # This lesson is just an essay and the reader could skip it if they want.\nThe readers at this point should understand enough to see the microlith architecture coming through in the current state of mirabeau.\nWe want to slam microservices, naturally, as overly complex and prone to failures for anything but the largest companies. We need to eviscerate K8S because it deserves it.\nThe key here is to make the case that from days 2-N the microlith can get you a long way without making a bunch decisions that are going to constrain your ability to scale later. Add to the case that golang produces statically link binaries and can have all the content baked into them. A single process is much easier to work on, debug, and deploy. You can even run it on your local laptop!\nOn day N+1, yeah, maybe you are getting so big you need to start using techniques to scale up your service. We should use this an opportunity to explain what a collection of nats servers can do and how you could have many senders and listeners distributed and thus allowing more throughput/scale/whatevs.\nI really want to hammer home the build/test/debug/deploy simplicity of the single binary microlith.\n"},{"id":12,"href":"/dsbook/docs/tests/","title":"(08) Testing","section":"Docs","content":" Testing # We want to show our testing story and how we can \u0026ldquo;unit test\u0026rdquo; and a really nice level without needing jest or whatever the crap else.\nDo we want to explain picturebook?\nBy using the ability to send things/receive things across the event bus from the , we can isolate subsystems. We can even use a channel to check that the final result beig sent to the long-lived connection is legit.\nBy using the store manipulation as the testing level, we can do simulations of many different user situations, including users making errors. We should show how we can setup a scenario where the DS server has some pages loaded (via the event bus!) and then see how it reacts to various user inputs that get sent as updates. For example, what if the user does next slide at the last slide? What happens if there is only slide, what does user input do?\nI think there might be a need to refactor the golang helpers a tiny bit into a golang interface here. The idea would be so we can introduce a mock into places like PatchStore and PatchStoreRaw so we can see the end effect of calling a user action with a given store content.\n"},{"id":13,"href":"/dsbook/docs/thewatchers/","title":"(09) The Watchers","section":"Docs","content":" The Watchers # We\u0026rsquo;ll create a collection of goroutines that are watching all the files in a given directory (1 goroutine per file) and when something changes it sends the new content along the event bus to cause the screen to be updated live.\nWe should add a test that shows that if you change a file the requisite watcher fires the message on the bus.\nIt would be fun to somehow offer the ability to \u0026ldquo;edit source\u0026rdquo; of a particular slide. Natch, we\u0026rsquo;d live update the HTML as the user types (not on save).\n"}]